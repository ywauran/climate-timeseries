# -*- coding: utf-8 -*-
"""climate-timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Pn3R04tIhA-M9YMIpUmd0udI3p60rW9
"""

import tensorflow as tf
import os
import pandas as pd
import numpy as np
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import *
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.losses import MeanSquaredError
from tensorflow.keras.metrics import RootMeanSquaredError
from tensorflow.keras.optimizers import Adam

zip_path = tf.keras.utils.get_file(
    origin='https://storage.googleapis.com/tensorflow/tf-keras-datasets/jena_climate_2009_2016.csv.zip',
    fname='jena_climate_2009_2016.csv.zip',
    extract=True)
csv_path, _ = os.path.splitext(zip_path)

df = pd.read_csv(csv_path)
df.head()

df = df[5::6]

df.index = pd.to_datetime(df['Date Time'], format='%d.%m.%Y %H:%M:%S')
df[:26]

threshold_mae = (df['T (degC)']).max() - (df['T (degC)']).min() * 10/100
temp_min = (df['T (degC)']).min()
temp_max = (df['T (degC)']).max()
threshold_mae, temp_min, temp_max

class myCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
      if(logs.get('mae') < temp_max and logs.get('val_mae')<temp_min):
        self.mode.stop.training = True
callbacks = myCallback()

temp = df['T (degC)']
temp.plot()

def df_to_X_y(df, window_size=5):
  df_as_np = df.to_numpy()
  X = []
  y = []
  for i in range(len(df_as_np)-window_size):
    row = [[a] for a in df_as_np[i:i+window_size]]
    X.append(row)
    label = df_as_np[i+window_size]
    y.append(label)
  return np.array(X), np.array(y)

WINDOW_SIZE = 5
X1, y1 = df_to_X_y(temp, WINDOW_SIZE)
X1.shape, y1.shape

X_train, y_train = X1[:56069], y1[:56069]
X_val, y_val = X1[56069:70086], y1[56069:70086]
X_train.shape, y_train.shape, X_val.shape, y_val.shape

model = Sequential()
model.add(InputLayer((5, 1)))
model.add(LSTM(64))
model.add(Dense(8, 'relu'))
model.add(Dense(1, 'linear'))

model.summary()

model.compile(loss=MeanSquaredError(), optimizer=Adam(learning_rate=0.0001), metrics=["mae"])

model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=20, callbacks=[callbacks])

val_predictions = model.predict(X_val).flatten()
val_results = pd.DataFrame(data={'Val Predictions':val_predictions, 'Actuals':y_val})
val_results

plt.plot(val_results['Val Predictions'][:100])
plt.plot(val_results['Actuals'][:100])